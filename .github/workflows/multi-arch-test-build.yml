name: Test Build

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    name: Test ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64_generic
            target: armsr-armv8
            runtime_test: true

          - arch: arm_cortex-a15_neon-vfpv4
            target: armsr-armv7
            runtime_test: true

          - arch: arm_cortex-a9_vfpv3-d16
            target: mvebu-cortexa9
            runtime_test: false

          - arch: i386_pentium-mmx
            target: x86-geode
            runtime_test: true

          - arch: mips_24kc
            target: ath79-generic
            runtime_test: true

          - arch: mipsel_24kc
            target: mt7621
            runtime_test: false

          - arch: powerpc_464fp
            target: apm821xx-nand
            runtime_test: false

          - arch: powerpc_8548
            target: mpc85xx-p1010
            runtime_test: false

          - arch: riscv64_generic
            target: sifiveu-generic
            runtime_test: false

          - arch: x86_64
            target: x86-64
            runtime_test: true

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine branch name
        run: |
          BRANCH="${GITHUB_BASE_REF#refs/heads/}"
          [ -n "$BRANCH" ] || BRANCH="${GITHUB_REF#refs/heads/}"
          echo "Building for $BRANCH"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Determine changed packages
        run: |
          # only detect packages with changes
          PKG_ROOTS=$(find . -name Makefile | \
            grep -v ".*/src/Makefile" | \
            sed -e 's@./\(.*\)/Makefile@\1/@')
          CHANGES=$(git diff --diff-filter=d --name-only origin/$BRANCH...)
          [ -n "$CHANGES" ] || CHANGES=$(git diff --diff-filter=d --name-only HEAD~)

          for ROOT in $PKG_ROOTS; do
            for CHANGE in $CHANGES; do
              if [[ "$CHANGE" == "$ROOT"* ]]; then
                PACKAGES+=$(echo "$ROOT" | sed -e 's@\(.*/\)*\(.*\)/@\2 @')
                break
              fi
            done
          done

          # fallback to test packages if nothing explicitly changes this is
          # should run if other mechanics in packages.git changed
          PACKAGES="${PACKAGES:-vim attendedsysupgrade-common bmon}"

          echo "Building $PACKAGES"
          echo "PACKAGES=$PACKAGES" >> $GITHUB_ENV

      - name: Generate OPKG build keys
        run: |
          sudo apt-get update
          sudo apt-get install -y signify-openbsd
          signify-openbsd -G -n -c 'DO NOT USE - OpenWrt packages feed CI' -p packages_ci.pub -s packages_ci.sec
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "KEY_BUILD<<$EOF" >> $GITHUB_ENV
          cat packages_ci.sec >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV

      - name: Generate APK build keys
        run: |
          openssl ecparam -name prime256v1 -genkey -noout -out packages-ci-private.pem
          openssl ec -in packages-ci-private.pem -pubout > packages-ci-public.pem
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "PRIVATE_KEY<<$EOF" >> $GITHUB_ENV
          cat packages-ci-private.pem >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV

      - name: Build
        uses: immortalwrt/gh-action-sdk@v7
        env:
          ARCH: ${{ matrix.arch }}-${{ env.BRANCH }}
          FEEDNAME: packages_ci
          INDEX: 1
          KEY_BUILD: ${{ env.KEY_BUILD }}
          PRIVATE_KEY: ${{ env.PRIVATE_KEY }}
          V: s

      - name: Move created packages to project dir
        if: always()
        run: cp -v bin/packages/${{ matrix.arch }}/packages_ci/* . || true

      - name: Store packages
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch}}-${{ github.sha}}-packages
          path: |
            Packages
            Packages.*
            *.ipk
            packages.adb
            *.apk

      - name: Store logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch}}-${{ github.sha}}-logs
          path: logs/

      - name: Remove logs
        if: always()
        run: sudo rm -rf logs/ || true

      - name: Check if any packages were built
        run: |
          if [ -n "$(find . -maxdepth 1 -type f -name '*.apk' -print -quit)" ]; then
            echo "Found *.apk files"
            HAVE_PKGS=true
            PKG_MANAGER=apk
          elif [ -n "$(find . -maxdepth 1 -type f -name '*.ipk' -print -quit)" ]; then
            echo "Found *.ipk files"
            HAVE_PKGS=true
            PKG_MANAGER=opkg
          else
            echo "No *.apk or *.ipk files found"
            HAVE_PKGS=false
          fi
          echo "HAVE_PKGS=$HAVE_PKGS" >> $GITHUB_ENV
          echo "PKG_MANAGER=$PKG_MANAGER" >> $GITHUB_ENV

      - name: Register QEMU
        if: ${{ matrix.runtime_test && fromJSON(env.HAVE_PKGS) }}
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support
          sudo update-binfmts --import

      - name: Build Docker container
        if: ${{ matrix.runtime_test && fromJSON(env.HAVE_PKGS) }}
        run: |
          docker build --platform linux/${{ matrix.arch }} -t test-container --build-arg ARCH .github/workflows/
        env:
          ARCH: ${{ matrix.arch }}-${{ env.BRANCH }}

      - name: Test via Docker container
        if: ${{ matrix.runtime_test && fromJSON(env.HAVE_PKGS) }}
        run: |
          docker run --platform linux/${{ matrix.arch }} --rm -v $GITHUB_WORKSPACE:/ci \
            -e PKG_MANAGER=${{ env.PKG_MANAGER }} \
            test-container
